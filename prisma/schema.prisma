// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Authors {
  id         Int       @id @default(autoincrement())
  name       String
  email      String?   @unique
  password   String
  role       Int       @default(1)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @default(now()) @db.Timestamptz(3)
  deleted_at DateTime?
  // Define a one-to-many relationship between Author and News
  news       News[]
}

model Users {
  id         Int       @id @default(autoincrement())
  name       String
  email      String?   @unique
  password   String
  country    String
  role       Int       @default(2)
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @default(now()) @db.Timestamptz(3)
  deleted_at DateTime?
}

model Categories {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @default(now()) @db.Timestamptz(3)
  deleted_at DateTime?
  // Define a many-to-many relationship between Categories and News
  news       News[]    @relation("CategoriesToNews")
}

model News {
  id           Int          @id @default(autoincrement())
  title        String
  news_body    String
  news_image   String
  author_id    Int?
  created_at   DateTime     @default(now()) @db.Timestamptz(3)
  updated_at   DateTime     @default(now()) @db.Timestamptz(3)
  deleted_at   DateTime?
  category_ids Int[]
  categories   Categories[] @relation("CategoriesToNews")
  author       Authors?     @relation(fields: [author_id], references: [id])
}

model Feedback {
  id          Int    @id @default(autoincrement())
  title       String
  name        String
  email       String
  description String
  created_at   DateTime     @default(now()) @db.Timestamptz(3)
  updated_at   DateTime     @default(now()) @db.Timestamptz(3)
  deleted_at   DateTime?
}